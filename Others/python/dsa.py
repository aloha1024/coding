# p=89884656743115821277366386389924436171282539556399773332572076771548966457722721809320380642174350385337311671008406971260944626772333461781094517436103631195179019233717345653148302085860127404990501627491314127261904779066044750779268857642761711889455010973893011082190388164715694701771748850780673633627
# q=756383573958998896797062804585035130902547068321
# g=66033628388331594929260620561306945774679494799488715268387980148589228517378712582992416937703392850930467924376029226207043085145950347901072725855121373105294360807341625228792281256538161341647039618577883267530440778230094111363056822370537590691768062827956175765550321765321571348511725774619661646046
# y=86625053304086625369813017034335009034294644153679509994921823299953867746665650835008069037452047806594981011474658064933686231327153594277488911422754538712866969779956649119097056287427497452128429075231252334146871080519714559558888737916282899884614447095640583824380914816605430373803691421148396047637
# from Crypto.Random import random
# from Crypto.Publickey import DSA
# from Crypto.Hash import SHA 

import hashlib
from Crypto.Util.number import *

p=89884656743115797835279418940637637937747792950968514843351534912775369060620568889442772751393777443122229394486112908957793312892708661186142852313411589133494007418656873530021620705803488762465728582308054183251202420560234382610744559809989828169793710142206368055891786771293995128525872109360067556231

q=730872533607444437033310693102547206152640528763

g=44044396301404621181763480874230978273321921985787485029734585436766050664261406774513754499128037903893300714586204845269107666029636882618476010213745362006902224072065983833344661260165186394661185386892659217967171017827417436085583895017262835952046529569160344976595056150238865446639223923547471256357

y=51864692892950932999514500542996092676609069154894486486809916838116908915084139401561790679085634178156321025542101471915420258632693912751560913505483280735364624026370619973643547653075197628106929956967434200111303680486334050188125892732902993299481076974695901867496865906228127598298229350072695393845

m=334436397493699539473999398012751306876
# [m,r,s]
l = [
        [6552181908429515529989854270507740427,
        328321186211490146989419765245059910661584847427,665794785724800028067802808060735715723833919777],
        [284000697448551212371985540664120126024,
        328321186211490146989419765245059910661584847427,652991346724460365621541280938636257765604910888]
]
d = {
    0: l[0],
    1: l[1],

}
k = ((d[0][2] - d[1][2]) * inverse(d[0][0] - d[1][0], q)) % q
print('k:',k)

x = ((d[0][0] * k - d[0][2]) * inverse(d[0][1], q)) % q
print('x:',x)
# x0 = ((d[0][0] * k - d[0][2]) * inverse(d[0][1], q)) % q
# print(x0)
# x8 = ((d[1][0] * k - d[1][2]) * inverse(d[1][1], q)) % q
# print(x8)
#print(hashlib.sha1(bytes(hex(x0)[2:], 'UTF-8')).hexdigest())
# r=(pow(g,k)%p)%q
# s=(m+r*x)%q/k
# print(r)
# print(s)
r=pow(g,1111)%p%q
s=(m+r*x)%q
print('r:',r)
print('s:',s)