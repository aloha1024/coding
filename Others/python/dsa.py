# p=89884656743115821277366386389924436171282539556399773332572076771548966457722721809320380642174350385337311671008406971260944626772333461781094517436103631195179019233717345653148302085860127404990501627491314127261904779066044750779268857642761711889455010973893011082190388164715694701771748850780673633627
# q=756383573958998896797062804585035130902547068321
# g=66033628388331594929260620561306945774679494799488715268387980148589228517378712582992416937703392850930467924376029226207043085145950347901072725855121373105294360807341625228792281256538161341647039618577883267530440778230094111363056822370537590691768062827956175765550321765321571348511725774619661646046
# y=86625053304086625369813017034335009034294644153679509994921823299953867746665650835008069037452047806594981011474658064933686231327153594277488911422754538712866969779956649119097056287427497452128429075231252334146871080519714559558888737916282899884614447095640583824380914816605430373803691421148396047637
# from Crypto.Random import random
# from Crypto.Publickey import DSA
# from Crypto.Hash import SHA 

import hashlib
from Crypto.Util.number import *

p=89884656743115795911709313584863793931169684646086341680160197042383569441171414896204216844437539814058647359882917893611169049741582855583009640161500243309192195284344167316216117225868781515234081523517287627582389175765091706452860050481606450320176305617762011147949223811817352021075375017500324443717

q=1094811127022784333294476826229889871955795191653

g=34171444071229329550739409222697967555569510657354365260058151794221630516005235833658525050314941101376301482354330520111056053829781818199644913191476057735601784206920735111594483731363751818076370219913331663024815623920455203562858039790068911681873726561675908940786779248254751677693607668560359276048

y=57511617644962730369619512610782033575272744269534379593414247234176333467431097763730794779076324954905902668258179690899709339435813748543274046284262714721369194927127973814840838306869697499944668991352988598574331988988545817869560535703806481945828173332497484636250180315722757865698188592784011081199

m=334436397493699539473999398012751306876
# [m,r,s]
l = [
        [136494280340438758462640370068750063956,
        846942785102785537101246149482848715864810643040,516160983200300615079904733294747866600795745397],
        [284000697448551212371985540664120126024,
        846942785102785537101246149482848715864810643040,218285227976140279477592500038413715335837314564]
]
d = {
    0: l[0],
    1: l[1],

}
k = ((d[0][2] - d[1][2]) * inverse(d[0][0] - d[1][0], q)) % q
print('k:',k)

x = ((d[0][0] * k - d[0][2]) * inverse(d[0][1], q)) % q
print('x:',x)
# x0 = ((d[0][0] * k - d[0][2]) * inverse(d[0][1], q)) % q
# print(x0)
# x8 = ((d[1][0] * k - d[1][2]) * inverse(d[1][1], q)) % q
# print(x8)
#print(hashlib.sha1(bytes(hex(x0)[2:], 'UTF-8')).hexdigest())
# r=(pow(g,k)%p)%q
# s=(m+r*x)%q/k
# print(r)
# print(s)
r=pow(g,1111)%p%q
s=(m+r*x)%q
print('r:',r)
print('s:',s)